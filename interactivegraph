load("~/Machine_learning_noob.RData")
library(shiny)
library(shinythemes)
library(plotly)
library(dplyr)
library(openxlsx)
library(rmarkdown)
library(officer)

# Check if `price_data_wide` exists to prevent crashes
if (!exists("price_data_wide")) {
    stop("The dataset `price_data_wide` is missing. Please load the correct data.")
}

# Define UI
ui <- fluidPage(
    uiOutput("theme_ui"),  # Dynamically render the UI with the selected theme
    titlePanel("Interactive Graph Loader"),
    
    tabsetPanel(
        # Tab 1: Main Graph Page
        tabPanel("View Stock",
                 sidebarLayout(
                     sidebarPanel(
                         selectInput("selected_column", "Choose a column to plot:",
                                     choices = names(price_data_wide)[-1],
                                     selected = names(price_data_wide)[2]),
                         selectInput("selected_year", "Choose a year to display:",
                                     choices = c("Max", unique(format(price_data_wide$Date, "%Y"))),
                                     selected = "Max"),
                         selectInput("theme", "Choose Theme:",
                                     choices = c("Journal" = "journal", "Superhero" = "superhero"),
                                     selected = "journal")
                     ),
                     mainPanel(
                         plotlyOutput("graph")
                     )
                 )
        ),
        
        # Tab 2: Compare Stocks Page
        tabPanel("Compare Stocks",
                 sidebarLayout(
                     sidebarPanel(
                         selectInput("primary_stock", "Select the primary stock:",
                                     choices = names(price_data_wide)[-1],
                                     selected = names(price_data_wide)[2]),
                         selectInput("comparison_stock", "Select the comparison stock:",
                                     choices = names(price_data_wide)[-1],
                                     selected = names(price_data_wide)[3]),
                         textInput("input_date", "Enter a starting date (YYYY/MM/DD):",
                                   placeholder = "YYYY/MM/DD"),
                         downloadButton("export_data", "Export Data")
                     ),
                     mainPanel(
                         plotlyOutput("comparison_graph")
                     )
                 )
        ),
        
        # Tab 3: Writeup Page
        tabPanel("Writeup",
                 sidebarLayout(
                     sidebarPanel(
                         downloadButton("download_pdf", "Download PDF"),
                         downloadButton("download_word", "Download Word")
                     ),
                     mainPanel(
                         h3("Writeup Content"),
                         p("This document provides an overview of your stock and macroeconomic analysis. Click the buttons to download.")
                     )
                 )
        )
    )
)

# Define server logic
server <- function(input, output, session) {
    # Dynamically update the theme
    output$theme_ui <- renderUI({
        fluidPage(theme = shinytheme(input$theme))
    })
    
    # Tab 1: Interactive Plot for Selected Stock and Year
    output$graph <- renderPlotly({
        filtered_data <- price_data_wide %>%
            filter(!is.na(.data[[input$selected_column]])) %>%
            {
                if (input$selected_year != "Max") {
                    filter(., format(Date, "%Y") == input$selected_year)
                } else {
                    .
                }
            }
        
        plot_ly(data = filtered_data) %>%
            add_lines(
                x = ~Date,
                y = ~.data[[input$selected_column]],
                name = input$selected_column,
                hoverinfo = "text",
                text = ~paste(
                    "Date: ", format(Date, "%d/%m/%Y"), "<br>",
                    "Value: £", round(.data[[input$selected_column]], 2)
                ),
                line = list(color = "blue")
            ) %>%
            layout(
                title = paste("Plot of", input$selected_column, 
                              if (input$selected_year == "Max") "over Entire Period" else paste("for Year", input$selected_year)),
                xaxis = list(title = "Date", tickformat = "%d/%m/%Y"),
                yaxis = list(title = "Value (£)"),
                hoverlabel = list(bgcolor = "white", font = list(size = 12))
            )
    })
    
    # Tab 2: Comparison Graph
    output$comparison_graph <- renderPlotly({
        start_date <- tryCatch(as.Date(input$input_date, format = "%Y/%m/%d"), error = function(e) NA)
        
        filtered_data <- price_data_wide %>%
            filter(!is.na(.data[[input$primary_stock]]), !is.na(.data[[input$comparison_stock]])) %>%
            {
                if (!is.na(start_date)) {
                    filter(., Date >= start_date)
                } else {
                    .
                }
            } %>%
            mutate(
                primary_pct_change = (.data[[input$primary_stock]] / first(.data[[input$primary_stock]]) - 1) * 100,
                comparison_pct_change = (.data[[input$comparison_stock]] / first(.data[[input$comparison_stock]]) - 1) * 100
            )
        
        plot_ly(data = filtered_data) %>%
            add_lines(
                x = ~Date,
                y = ~primary_pct_change,
                name = paste("Primary:", input$primary_stock),
                hoverinfo = "text",
                text = ~paste(
                    "Date: ", format(Date, "%d/%m/%Y"), "<br>",
                    "Primary Percentage Change: ", round(primary_pct_change, 2), "%"
                ),
                line = list(color = "blue")
            ) %>%
            add_lines(
                x = ~Date,
                y = ~comparison_pct_change,
                name = paste("Comparison:", input$comparison_stock),
                hoverinfo = "text",
                text = ~paste(
                    "Date: ", format(Date, "%d/%m/%Y"), "<br>",
                    "Comparison Percentage Change: ", round(comparison_pct_change, 2), "%"
                ),
                line = list(color = "red")
            ) %>%
            layout(
                title = "Percentage Change Comparison",
                xaxis = list(title = "Date", tickformat = "%d/%m/%Y"),
                yaxis = list(title = "Percentage Change (%)"),
                hoverlabel = list(bgcolor = "white", font = list(size = 12))
            )
    })
    
    # Export data handler
    output$export_data <- downloadHandler(
        filename = function() { paste("Filtered_Data_", Sys.Date(), ".xlsx", sep = "") },
        content = function(file) {
            write.xlsx(price_data_wide, file)
        }
    )
    
    # PDF Download Handler
    output$download_pdf <- downloadHandler(
        filename = function() { paste("Writeup_", Sys.Date(), ".pdf", sep = "") },
        content = function(file) {
            temp_report <- file.path(tempdir(), "writeup.Rmd")
            writeLines(c(
                "---",
                "title: 'Writeup Analysis'",
                "output: pdf_document",
                "---",
                "",
                "This document summarizes stock and macroeconomic analysis performed.",
                "",
                "```{r}",
                "head(price_data_wide, 10)",
                "```"
            ), temp_report)
            rmarkdown::render(input = temp_report, output_file = file, clean = TRUE)
        }
    )
    
    # Word Download Handler
    output$download_word <- downloadHandler(
        filename = function() { paste("Writeup_", Sys.Date(), ".docx", sep = "") },
        content = function(file) {
            doc <- read_docx() %>% body_add_par("This is your analysis summary.", style = "Normal")
            print(doc, target = file)
        }
    )
}

# Run the application
shinyApp(ui = ui, server = server)


# stage - develop permanent web address to show linkedin connections
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(
    name = "machinelearning",
    token = "9CED63A5553312BXXXX",
    secret = "<YOUR_SECRET_KEY>"
)
rsconnect::deployApp('path/to/your/app')

#to add - total viewer count, total share count, look at other packages which makes data look nice in R, mousepad that hovers over datapoints and shows datapoints. 
