library(shiny)
library(dplyr)
library(ggplot2)
library(reshape2)
library(seriation)
library(plotly)

# Ensure `price_data_wide` exists and is valid
if (!exists("price_data_wide")) {
    stop("The dataset `price_data_wide` is missing. Please load the correct data.")
}

ui <- fluidPage(
    titlePanel("S&P 500 Correlation Matrix"),
    sidebarLayout(
        sidebarPanel(
            h4("Correlation Matrix of S&P 500 Constituents"),
            helpText("Select stocks and date range for the heatmap."),
            dateRangeInput(
                "date_range",
                "Choose Date Range:",
                start = min(price_data_wide$Date),
                end = max(price_data_wide$Date),
                min = min(price_data_wide$Date),
                max = max(price_data_wide$Date)
            ),
            uiOutput("available_stocks_ui"),  # Dynamic UI for available stocks
            uiOutput("selected_stocks_ui")   # Dynamic UI for selected stocks
        ),
        mainPanel(
            uiOutput("plot_or_message")  # Dynamic output: Plot or message
        )
    )
)

server <- function(input, output, session) {
    # Reactive values to manage the stock pool
    stock_pool <- reactiveValues(
        available = colnames(price_data_wide)[-1], # Initial stock pool (excluding Date)
        selected = colnames(price_data_wide)[-1]  # Select all stocks by default
    )

    # Update UI for available stocks
    output$available_stocks_ui <- renderUI({
        selectInput(
            "available_stocks",
            "Available stocks:",
            choices = stock_pool$available,
            selected = NULL,
            multiple = TRUE
        )
    })

    # Update UI for selected stocks
    output$selected_stocks_ui <- renderUI({
        selectInput(
            "selected_stocks",
            "Selected stocks:",
            choices = stock_pool$selected,
            selected = stock_pool$selected,
            multiple = TRUE
        )
    })

    # Observe selection from available stocks to add
    observeEvent(input$available_stocks, {
        selected_to_add <- input$available_stocks
        stock_pool$selected <- unique(c(stock_pool$selected, selected_to_add))
        stock_pool$available <- setdiff(stock_pool$available, selected_to_add)
    })

    # Observe selection from selected stocks to remove
    observeEvent(input$selected_stocks, {
        selected_to_remove <- setdiff(stock_pool$selected, input$selected_stocks)
        stock_pool$available <- unique(c(stock_pool$available, selected_to_remove))
        stock_pool$selected <- setdiff(stock_pool$selected, selected_to_remove)
    })

    # Reactive correlation matrix calculation
    correlation_matrix_data <- reactive({
        # Ensure at least two stocks are selected
        if (length(stock_pool$selected) < 2) {
            return(NULL)
        }

        # Filter data by date range and selected stocks
        filtered_data <- price_data_wide %>%
            filter(Date >= input$date_range[1] & Date <= input$date_range[2]) %>%
            select(c("Date", all_of(stock_pool$selected))) %>%
            mutate(across(!"Date", ~ (.x / lag(.x) - 1) * 100)) %>%
            na.omit()

        # If filtered data is empty, return NULL
        if (nrow(filtered_data) == 0) {
            return(NULL)
        }

        # Drop the Date column for correlation matrix calculation
        price_changes_matrix <- filtered_data %>%
            select(-Date)

        # Compute the correlation matrix (ranges between -1 and 1 naturally)
        cor_matrix <- cor(price_changes_matrix, use = "pairwise.complete.obs")

        # Cluster rows and columns
        order <- seriate(as.dist(1 - cor_matrix), method = "HC")
        cor_matrix <- cor_matrix[get_order(order), get_order(order)]
        cor_matrix
    })

    # Dynamic output: Either plot or message
    output$plot_or_message <- renderUI({
        cor_matrix <- correlation_matrix_data()

        if (is.null(cor_matrix)) {
            return(
                div(
                    style = "color: red; font-weight: bold;",
                    "Error: No data available for the selected date range and stocks."
                )
            )
        }

        plotlyOutput("correlation_matrix_plot")
    })

    # Render the interactive heatmap
    output$correlation_matrix_plot <- renderPlotly({
        cor_matrix <- correlation_matrix_data()

        # Melt the correlation matrix for plotly
        cor_melted <- melt(cor_matrix, varnames = c("Var1", "Var2"))

        # Generate interactive heatmap
        plot_ly(
            data = cor_melted,
            x = ~Var1, y = ~Var2, z = ~value,
            type = "heatmap", colors = colorRamp(c("red", "white", "blue")),
            hoverinfo = "x+y+z"
        ) %>%
        layout(
            title = "Correlation Matrix of Selected S&P 500 Stocks",
            xaxis = list(title = "Stocks", tickangle = 45),
            yaxis = list(title = "Stocks")
        )
    })
}

# Run the application
shinyApp(ui = ui, server = server)
