# Load Required Libraries
library(shiny)
library(shinythemes)
library(plotly)
library(quantmod)   # Bollinger Bands
library(tidyverse)
library(zoo)

# Step 1: Load and Clean Price Data
price_data <- price_data_wide  # Replace with your actual dataset

price_data <- price_data %>%
    mutate(Date = as.Date(Date)) %>%
    column_to_rownames("Date") %>%
    select(where(~ any(!is.na(.)))) %>% 
    mutate_all(~ as.numeric(.)) %>%               # Ensure numeric
    mutate_all(~ na.locf(., na.rm = FALSE)) %>%   # Forward fill missing values
    mutate_all(~ na.locf(., fromLast = TRUE, na.rm = FALSE))  # Backward fill

# Step 2: Function to Calculate Bollinger Bands and Z-Statistic
calculate_signals <- function(price_series, n = 20, k = 2) {
    price_series <- as.numeric(na.omit(price_series))  # Ensure numeric and remove NAs
    
    if (length(price_series) < n) return(NULL)  # Skip if not enough data points
    
    # Calculate Bollinger Bands
    bb <- BBands(price_series, n = n, sd = k)
    BB_Mean <- bb[, "mavg"]  # Center line
    rolling_sd <- rollapply(price_series, n, sd, fill = NA, align = "right")
    
    # Calculate Z-Statistic
    Z <- (price_series - BB_Mean) / rolling_sd
    
    # Generate BUY/SELL signals with Z-stat filter
    signal <- rep("HOLD", length(price_series))  # Default to HOLD
    signal[price_series < bb[, "dn"] & Z < -2] <- "BUY"   # Strong BUY signal
    signal[price_series > bb[, "up"] & Z > 2] <- "SELL"   # Strong SELL signal
    
    # Create result data frame
    return(data.frame(
        Price = price_series,
        BB_Upper = bb[, "up"],
        BB_Lower = bb[, "dn"],
        BB_Mean  = BB_Mean,
        Z_Statistic = Z,
        Signal = signal
    ))
}

# Step 3: Apply Bollinger Bands Function to All Stocks
signals_list <- lapply(price_data, calculate_signals)
names(signals_list) <- colnames(price_data)

# Combine All Results into a Single DataFrame
signals_combined <- bind_rows(lapply(names(signals_list), function(stock) {
    cbind(Stock = stock, Date = rownames(signals_list[[stock]]), signals_list[[stock]])
}), .id = "ID")

# Clean stock names to avoid issues in Shiny input
signals_combined$Stock <- gsub(" ", "_", signals_combined$Stock)  # Replace spaces with underscores
unique_stocks <- unique(signals_combined$Stock)

# Step 4: Backtest Strategy for Each Stock
backtest_strategy <- function(data) {
    data <- data %>%
        arrange(Date) %>%
        mutate(
            Return = case_when(
                Signal == "BUY"  ~ (lead(Price) - Price) / Price,  # Buy → Sell Next Day
                Signal == "SELL" ~ (Price - lead(Price)) / Price,  # Sell → Buy Back Next Day
                TRUE ~ NA_real_                                     # Ignore HOLD
            )
        ) %>%
        filter(!is.na(Return))  # Remove invalid returns
    
    return(sum(data$Return, na.rm = TRUE))  # Total PnL
}

# Apply Backtesting to Each Stock
pnl_results <- signals_combined %>%
    group_by(Stock) %>%
    summarise(Total_PnL = backtest_strategy(.))

# Print PnL Results
print("Backtesting Results:")
print(pnl_results)

# Step 5: Build Shiny App for Visualization
ui <- fluidPage(
    theme = shinytheme("journal"),
    titlePanel("Bollinger Bands with Z-Statistic Backtest and Visualization"),
    
    sidebarLayout(
        sidebarPanel(
            selectInput("selected_stock", "Choose a Stock:",
                        choices = unique_stocks,   # Use cleaned stock names
                        selected = unique_stocks[1])  # Default to the first stock
        ),
        mainPanel(
            plotlyOutput("plot_bollinger"),
            h4("Interactive Plot"),
            p("View Bollinger Bands, Price, and Signals for the selected stock with Z-stat filtering.")
        )
    )
)

server <- function(input, output, session) {
    # Filter data based on selected stock
    selected_data <- reactive({
        signals_combined %>% filter(Stock == input$selected_stock)
    })
    
    # Render Plot
    output$plot_bollinger <- renderPlotly({
        stock_data <- selected_data()
        
        plot_ly(stock_data, x = ~as.Date(Date)) %>%
            add_lines(y = ~Price, name = "Price", line = list(color = "blue")) %>%
            add_lines(y = ~BB_Upper, name = "BB Upper", line = list(color = "red", dash = "dash")) %>%
            add_lines(y = ~BB_Lower, name = "BB Lower", line = list(color = "green", dash = "dash")) %>%
            add_markers(y = ~Price, color = ~Signal, 
                        colors = c("BUY" = "green", "SELL" = "red", "HOLD" = "gray"),
                        name = "Signals", size = 10) %>%
            layout(
                title = paste("Bollinger Bands with Z-Statistic for", input$selected_stock),
                xaxis = list(title = "Date"),
                yaxis = list(title = "Price")
            )
    })
}

# Run the Shiny App
shinyApp(ui = ui, server = server)

# Install required libraries if not already installed
if (!require("openxlsx")) install.packages("openxlsx")
if (!require("quantmod")) install.packages("quantmod")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("zoo")) install.packages("zoo")

# Load libraries
library(openxlsx)
library(quantmod)
library(tidyverse)
library(zoo)

# Step 1: Load and Clean Price Data
price_data <- price_data_wide  # Replace with your actual dataset

price_data <- price_data %>%
    mutate(Date = as.Date(Date)) %>%
    column_to_rownames("Date") %>%
    select(where(~ any(!is.na(.)))) %>% 
    mutate(across(everything(), as.numeric))  # Ensure all values are numeric

# Step 2: Function to Calculate Bollinger Bands and Z-Statistic
calculate_signals <- function(price_series, n = 20, k = 2) {
    if (all(is.na(price_series))) return(NULL)
    
    BB_Upper <- BB_Lower <- BB_Mean <- Z <- rep(NA, length(price_series))
    signal <- rep("HOLD", length(price_series))  # Default signal
    
    valid_indices <- which(!is.na(price_series))
    if (length(valid_indices) >= n) {
        bb <- BBands(price_series[valid_indices], n = n, sd = k)
        rolling_sd <- rollapply(price_series[valid_indices], n, sd, fill = NA, align = "right")
        
        BB_Mean[valid_indices] <- bb[, "mavg"]
        BB_Upper[valid_indices] <- bb[, "up"]
        BB_Lower[valid_indices] <- bb[, "dn"]
        Z[valid_indices] <- (price_series[valid_indices] - BB_Mean[valid_indices]) / rolling_sd
        
        signal[valid_indices][price_series[valid_indices] < BB_Lower[valid_indices] & Z[valid_indices] < -2] <- "BUY"
        signal[valid_indices][price_series[valid_indices] > BB_Upper[valid_indices] & Z[valid_indices] > 2] <- "SELL"
    }
    
    return(data.frame(
        Date = rownames(price_data),
        Price = price_series,
        BB_Upper = BB_Upper,
        BB_Lower = BB_Lower,
        BB_Mean = BB_Mean,
        Z_Statistic = Z,
        Signal = signal
    ))
}

# Step 3: Apply Function and Save to Excel
signals_list <- lapply(price_data, calculate_signals)
names(signals_list) <- colnames(price_data)

save_to_excel <- function(signals_list, file_name = "bollinger_signals.xlsx") {
    workbook <- createWorkbook()
    
    for (stock in names(signals_list)) {
        if (!is.null(signals_list[[stock]])) {
            sheet_data <- signals_list[[stock]]
            sheet_name <- str_replace_all(stock, "[^A-Za-z0-9_]", "_")
            addWorksheet(workbook, sheetName = sheet_name)
            writeData(workbook, sheet = sheet_name, sheet_data)
        }
    }
    
    saveWorkbook(workbook, file_name, overwrite = TRUE)
}

save_to_excel(signals_list, "bollinger_signals.xlsx")
print("Excel file saved successfully.")


#Loads actual data
library(shiny)
library(DT)

# Define UI for application
ui <- fluidPage(
  
  # Title
  titlePanel("Bollinger Signals Viewer"),
  
  # Sidebar layout
  sidebarLayout(
    
    # Sidebar for inputs
    sidebarPanel(
      fileInput("file", "Upload Bollinger Signals File:",
                accept = c(".csv", ".xlsx")),
      uiOutput("column_selector"),
      uiOutput("row_filter"),
      actionButton("load_data", "Load Data")
    ),
    
    # Main panel to display outputs
    mainPanel(
      DTOutput("data_table")
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  
  # Reactive value to hold the loaded dataset
  reactive_data <- reactiveVal()
  
  # Observe the load button
  observeEvent(input$load_data, {
    req(input$file)
    
    # Load data based on file type
    file_ext <- tools::file_ext(input$file$name)
    if (file_ext == "csv") {
      data <- read.csv(input$file$datapath)
    } else if (file_ext == "xlsx") {
      library(readxl)
      data <- read_excel(input$file$datapath)
    } else {
      showNotification("Unsupported file type.", type = "error")
      return()
    }
    
    reactive_data(data)
  })
  
  # Generate column selector dynamically
  output$column_selector <- renderUI({
    req(reactive_data())
    selectInput("columns", "Select Columns:",
                choices = names(reactive_data()),
                selected = names(reactive_data()),
                multiple = TRUE)
  })
  
  # Generate row filter dynamically
  output$row_filter <- renderUI({
    req(reactive_data())
    sliderInput("row_range", "Select Row Range:",
                min = 1,
                max = nrow(reactive_data()),
                value = c(1, min(10, nrow(reactive_data()))))
  })
  
  # Render data table
  output$data_table <- renderDT({
    req(reactive_data(), input$columns, input$row_range)
    data <- reactive_data()
    filtered_data <- data[input$row_range[1]:input$row_range[2], input$columns, drop = FALSE]
    datatable(filtered_data)
  })
}

# Run the application
shinyApp(ui = ui, server = server)

# Install required libraries if not already installed
if (!require("openxlsx")) install.packages("openxlsx")
if (!require("quantmod")) install.packages("quantmod")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("zoo")) install.packages("zoo")
if (!require("shiny")) install.packages("shiny")
if (!require("DT")) install.packages("DT")

# Load libraries
library(openxlsx)
library(quantmod)
library(tidyverse)
library(zoo)
library(shiny)
library(DT)

# Step 1: Load and Clean Price Data
price_data <- price_data_wide  # Replace with your actual dataset

price_data <- price_data %>%
    mutate(Date = as.Date(Date)) %>%
    column_to_rownames("Date") %>%
    select(where(~ any(!is.na(.)))) %>% 
    mutate(across(everything(), as.numeric))  # Ensure all values are numeric

# Step 2: Function to Calculate Bollinger Bands and Z-Statistic
calculate_signals <- function(price_series, n = 20, k = 2) {
    if (all(is.na(price_series))) return(NULL)
    
    BB_Upper <- BB_Lower <- BB_Mean <- Z <- rep(NA, length(price_series))
    signal <- rep("HOLD", length(price_series))  # Default signal
    
    valid_indices <- which(!is.na(price_series))
    if (length(valid_indices) >= n) {
        bb <- BBands(price_series[valid_indices], n = n, sd = k)
        rolling_sd <- rollapply(price_series[valid_indices], n, sd, fill = NA, align = "right")
        
        BB_Mean[valid_indices] <- bb[, "mavg"]
        BB_Upper[valid_indices] <- bb[, "up"]
        BB_Lower[valid_indices] <- bb[, "dn"]
        Z[valid_indices] <- (price_series[valid_indices] - BB_Mean[valid_indices]) / rolling_sd
        
        signal[valid_indices][price_series[valid_indices] < BB_Lower[valid_indices] & Z[valid_indices] < -2] <- "BUY"
        signal[valid_indices][price_series[valid_indices] > BB_Upper[valid_indices] & Z[valid_indices] > 2] <- "SELL"
    }
    
    return(data.frame(
        Date = rownames(price_data),
        Price = price_series,
        BB_Upper = BB_Upper,
        BB_Lower = BB_Lower,
        BB_Mean = BB_Mean,
        Z_Statistic = Z,
        Signal = signal
    ))
}

# Step 3: Apply Function and Save to Excel
signals_list <- lapply(price_data, calculate_signals)
names(signals_list) <- colnames(price_data)

save_to_excel <- function(signals_list, file_name = "bollinger_signals.xlsx") {
    workbook <- createWorkbook()
    
    for (stock in names(signals_list)) {
        if (!is.null(signals_list[[stock]])) {
            sheet_data <- signals_list[[stock]]
            sheet_name <- str_replace_all(stock, "[^A-Za-z0-9_]", "_")
            addWorksheet(workbook, sheetName = sheet_name)
            writeData(workbook, sheet = sheet_name, sheet_data)
        }
    }
    
    saveWorkbook(workbook, file_name, overwrite = TRUE)
}

save_to_excel(signals_list, "bollinger_signals.xlsx")
print("Excel file saved successfully.")

# Step 4: Dynamic Visualization with Shiny
ui <- fluidPage(
    
    # Title
    titlePanel("Dynamic Bollinger Signals Visualization"),
    
    # Sidebar layout
    sidebarLayout(
        sidebarPanel(
            selectInput("stock", "Select Stock:", choices = names(signals_list)),
            dateRangeInput("date_range", "Select Date Range:", start = min(price_data$Date), end = max(price_data$Date))
        ),
        
        mainPanel(
            plotOutput("bollinger_plot"),
            DTOutput("signals_table")
        )
    )
)

server <- function(input, output, session) {
    
    filtered_data <- reactive({
        req(input$stock, input$date_range)
        data <- signals_list[[input$stock]]
        data <- data %>% filter(Date >= input$date_range[1] & Date <= input$date_range[2])
        return(data)
    })
    
    output$bollinger_plot <- renderPlot({
        req(filtered_data())
        data <- filtered_data()
        
        # Use Python's matplotlib-like approach for plotting
        par(mar = c(5, 5, 4, 2) + 0.1)
        plot(as.Date(data$Date), data$Price, type = "l", col = "blue", lwd = 2, xlab = "Date", ylab = "Price",
             main = paste("Bollinger Bands for", input$stock))
        lines(as.Date(data$Date), data$BB_Upper, col = "red", lwd = 1.5)
        lines(as.Date(data$Date), data$BB_Lower, col = "green", lwd = 1.5)
        lines(as.Date(data$Date), data$BB_Mean, col = "orange", lwd = 1.5)
        legend("topright", legend = c("Price", "BB Upper", "BB Lower", "BB Mean"), 
               col = c("blue", "red", "green", "orange"), lty = 1, cex = 0.8)
    })
    
    output$signals_table <- renderDT({
        req(filtered_data())
        datatable(filtered_data())
    })
}

shinyApp(ui, server)

