# Load Required Libraries
library(shiny)
library(shinythemes)
library(plotly)
library(quantmod)   # Bollinger Bands
library(tidyverse)
library(zoo)

# Step 1: Load and Clean Price Data
price_data <- price_data_wide  # Replace with your actual dataset

price_data <- price_data %>%
    mutate(Date = as.Date(Date)) %>%
    column_to_rownames("Date") %>%
    select(where(~ any(!is.na(.)))) %>% 
    mutate_all(~ as.numeric(.)) %>%               # Ensure numeric
    mutate_all(~ na.locf(., na.rm = FALSE)) %>%   # Forward fill missing values
    mutate_all(~ na.locf(., fromLast = TRUE, na.rm = FALSE))  # Backward fill

# Step 2: Function to Calculate Bollinger Bands and Generate Signals
calculate_signals <- function(price_series, n = 20, k = 2) {
    price_series <- as.numeric(na.omit(price_series))  # Ensure numeric and remove NAs
    
    if (length(price_series) < n) return(NULL)  # Skip if not enough data points
    
    # Calculate Bollinger Bands
    bb <- BBands(price_series, n = n, sd = k)
    
    # Generate BUY/SELL signals
    signal <- rep("HOLD", length(price_series))  # Default to HOLD
    signal[price_series < bb[, "dn"]] <- "BUY"   # Price below lower band
    signal[price_series > bb[, "up"]] <- "SELL"  # Price above upper band
    
    # Create result data frame
    return(data.frame(
        Price = price_series,
        BB_Upper = bb[, "up"],
        BB_Lower = bb[, "dn"],
        BB_Mean  = bb[, "mavg"],
        Signal = signal
    ))
}

# Step 3: Apply Bollinger Bands Function to All Stocks
signals_list <- lapply(price_data, calculate_signals)
names(signals_list) <- colnames(price_data)

# Combine All Results into a Single DataFrame
signals_combined <- bind_rows(lapply(names(signals_list), function(stock) {
    cbind(Stock = stock, Date = rownames(signals_list[[stock]]), signals_list[[stock]])
}), .id = "ID")

# Step 4: Backtest Strategy for Each Stock
backtest_strategy <- function(data) {
    data <- data %>%
        arrange(Date) %>%
        mutate(
            Return = case_when(
                Signal == "BUY"  ~ (lead(Price) - Price) / Price,  # Buy → Sell Next Day
                Signal == "SELL" ~ (Price - lead(Price)) / Price,  # Sell → Buy Back Next Day
                TRUE ~ NA_real_                                     # Ignore HOLD
            )
        ) %>%
        filter(!is.na(Return))  # Remove invalid returns
    
    return(sum(data$Return, na.rm = TRUE))  # Total PnL
}

# Apply Backtesting to Each Stock
pnl_results <- signals_combined %>%
    group_by(Stock) %>%
    summarise(Total_PnL = backtest_strategy(.))

# Print PnL Results
print("Backtesting Results:")
print(pnl_results)

# Step 5: Build Shiny App for Visualization
ui <- fluidPage(
    theme = shinytheme("journal"),
    titlePanel("Bollinger Bands Backtest and Visualization"),
    
    sidebarLayout(
        sidebarPanel(
            selectInput("selected_stock", "Choose a Stock:",
                        choices = unique(signals_combined$Stock),
                        selected = unique(signals_combined$Stock)[1])
        ),
        mainPanel(
            plotlyOutput("plot_bollinger"),
            h4("Interactive Plot"),
            p("View Bollinger Bands, Price, and Signals for the selected stock.")
        )
    )
)

server <- function(input, output, session) {
    # Filter data based on selected stock
    selected_data <- reactive({
        signals_combined %>% filter(Stock == input$selected_stock)
    })
    
    # Render Plot
    output$plot_bollinger <- renderPlotly({
        stock_data <- selected_data()
        
        plot_ly(stock_data, x = ~as.Date(Date)) %>%
            add_lines(y = ~Price, name = "Price", line = list(color = "blue")) %>%
            add_lines(y = ~BB_Upper, name = "BB Upper", line = list(color = "red", dash = "dash")) %>%
            add_lines(y = ~BB_Lower, name = "BB Lower", line = list(color = "green", dash = "dash")) %>%
            add_markers(y = ~Price, color = ~Signal, 
                        colors = c("BUY" = "green", "SELL" = "red", "HOLD" = "gray"),
                        name = "Signals", size = 10) %>%
            layout(
                title = paste("Bollinger Bands for", input$selected_stock),
                xaxis = list(title = "Date"),
                yaxis = list(title = "Price")
            )
    })
}

# Run the Shiny App
shinyApp(ui = ui, server = server)
