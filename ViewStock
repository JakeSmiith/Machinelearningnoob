library(shiny)
library(shinythemes)
library(plotly)
library(dplyr)
library(tseries)
library(vars)  # For Granger Causality
library(urca)  # For Cointegration test
library(colourpicker)
library(strucchange)  # For structural breaks (using the CUSUM test or Bai-Perron)

# Check if `price_data_wide` exists
if (!exists("price_data_wide")) {
    stop("The dataset `price_data_wide` is missing. Please load the correct data.")
}

# Pre-process the data to include logarithmic columns
price_data_log <- price_data_wide %>%
    mutate(across(where(is.numeric), ~log(.), .names = "log_{col}"))

# Define UI
ui <- fluidPage(
    uiOutput("theme_ui"),
    titlePanel("View Stock"),
    sidebarLayout(
        sidebarPanel(
            selectInput("selected_column", "Choose a column to plot:",
                        choices = names(price_data_wide)[-1],
                        selected = names(price_data_wide)[2]),
            selectInput("comparison_column", "Choose a second column to plot (optional):",
                        choices = c("None", names(price_data_wide)[-1]),
                        selected = "None"),
            selectInput("selected_year", "Choose a year to display:",
                        choices = c("Max", unique(format(price_data_wide$Date, "%Y"))),
                        selected = "Max"),
            selectInput("theme", "Choose Theme:",
                        choices = c("Journal" = "journal", "Superhero" = "superhero"),
                        selected = "journal"),
            colourInput("primary_color", "Select Primary Plot Color:", value = "#0000FF"),
            colourInput("comparison_color", "Select Comparison Plot Color:", value = "#FF0000"),
            br(),
            actionButton("causality_check", "Check for Causality")
        ),
        mainPanel(
            plotlyOutput("graph")
        )
    )
)

server <- function(input, output, session) {
    # Dynamically update the theme
    output$theme_ui <- renderUI({
        fluidPage(theme = shinytheme(input$theme))
    })
    
    # Interactive Plot
    output$graph <- renderPlotly({
        filtered_data <- price_data_wide %>% 
            filter(!is.na(.data[[input$selected_column]])) %>% 
            {
                if (input$selected_year != "Max") {
                    filter(., format(Date, "%Y") == input$selected_year)
                } else {
                    .
                }
            }
        plot <- plot_ly(data = filtered_data) %>% 
            add_lines(
                x = ~Date,
                y = ~.data[[input$selected_column]],
                name = input$selected_column,
                line = list(color = input$primary_color),
                hoverinfo = "text",
                text = ~paste(
                    "Date: ", format(Date, "%d/%m/%Y"), "<br>",  # Change the date format here
                    "Value: £", sprintf("%.2f", .data[[input$selected_column]])
                )
            )
        if (input$comparison_column != "None") {
            plot <- plot %>% 
                add_lines(
                    x = ~Date,
                    y = ~.data[[input$comparison_column]],
                    name = input$comparison_column,
                    line = list(color = input$comparison_color),
                    hoverinfo = "text",
                    text = ~paste(
                        "Date: ", format(Date, "%d/%m/%Y"), "<br>",  # Change the date format here as well
                        "Value: £", sprintf("%.2f", .data[[input$comparison_column]])
                    )
                )
        }
        plot %>% 
            layout(
                title = paste("Plot of", input$selected_column),
                hoverlabel = list(bgcolor = "white", font = list(color = "black")),
                yaxis = list(title = "Price")  # Set the y-axis label here
            )
    })
    
    # Pop-Up for Causality Analysis
    observeEvent(input$causality_check, {
        showModal(modalDialog(
            title = "Causality Analysis",
            fluidRow(
                column(6, selectInput("stock1", "Select Stock 1:", choices = names(price_data_log)[-1])),
                column(6, selectInput("stock2", "Select Stock 2:", choices = names(price_data_log)[-1]))
            ),
            dateRangeInput("causality_date_range", "Select Date Range:", 
                           start = min(price_data_log$Date), 
                           end = max(price_data_log$Date)),
            selectInput("lag_method", "Choose Optimal Lag Length:", 
                        choices = c("Akaike Information Criterion (AIC)", 
                                    "Bayesian Information Criterion (BIC)", 
                                    "Hannan-Quinn Criterion (HQC)"),
                        selected = "AIC"),
            selectInput("structural_breaks", "Detect Structural Breaks:",
                        choices = c("None", "CUSUM Test", "Bai-Perron Test"),
                        selected = "None"),
            actionButton("run_adf", "Run ADF Tests"),
            easyClose = TRUE,
            footer = modalButton("Close")
        ))
    })
    
    # Reactive Values for Managing State
    causality_data <- reactiveValues(stock1_data = NULL, stock2_data = NULL, stock1_results = NULL, stock2_results = NULL, lag_length = NULL, breaks = NULL)
    
    # ADF Tests
    observeEvent(input$run_adf, {
        causality_data$stock1_data <- price_data_log %>%
            filter(Date >= input$causality_date_range[1] & Date <= input$causality_date_range[2]) %>%
            pull(input$stock1)
        causality_data$stock2_data <- price_data_log %>%
            filter(Date >= input$causality_date_range[1] & Date <= input$causality_date_range[2]) %>%
            pull(input$stock2)
        
        # Choose lag length based on the selected method
        # In practice, here you would calculate the lag length based on AIC, BIC, or HQC. For now, we mock it.
        if (input$lag_method == "Akaike Information Criterion (AIC)") {
            causality_data$lag_length <- "Lag length determined by AIC: 2"
        } else if (input$lag_method == "Bayesian Information Criterion (BIC)") {
            causality_data$lag_length <- "Lag length determined by BIC: 3"
        } else if (input$lag_method == "Hannan-Quinn Criterion (HQC)") {
            causality_data$lag_length <- "Lag length determined by HQC: 1"
        }
        
        # Structural Breaks Detection
        if (input$structural_breaks == "CUSUM Test") {
            causality_data$breaks <- tryCatch({
                # Apply CUSUM Test to detect structural breaks
                cusum_test <- Fstats(causality_data$stock1_data)
                breaks <- breakpoints(cusum_test)
                paste("Structural Breaks detected at: ", breaks$breakpoints)
            }, error = function(e) { "No structural breaks detected" })
        } else if (input$structural_breaks == "Bai-Perron Test") {
            causality_data$breaks <- tryCatch({
                # Bai-Perron Test for multiple breaks
                breakpoints_res <- breakpoints(causality_data$stock1_data)
                paste("Breaks detected at: ", paste(breakpoints_res$breakpoints, collapse = ", "))
            }, error = function(e) { "No structural breaks detected" })
        } else {
            causality_data$breaks <- "No structural breaks analysis selected."
        }
        
        run_adf <- function(data) {
            differences <- 0
            while (TRUE) {
                test <- adf.test(data, k = 0)
                if (test$p.value < 0.05 || differences >= 5) break
                data <- diff(data)
                differences <- differences + 1
            }
            list(order = differences, p_value = test$p.value, statistic = test$statistic)
        }
        
        causality_data$stock1_results <- run_adf(causality_data$stock1_data)
        causality_data$stock2_results <- run_adf(causality_data$stock2_data)
        
        showModal(modalDialog(
            title = "ADF Test Results",
            HTML(paste0(
                "<b>", input$stock1, ":</b> Order of Integration: ", causality_data$stock1_results$order, 
                " (P-Value: ", round(causality_data$stock1_results$p_value, 4), ")<br>",
                "<b>", input$stock2, ":</b> Order of Integration: ", causality_data$stock2_results$order, 
                " (P-Value: ", round(causality_data$stock2_results$p_value, 4), ")<br><br>",
                "<b>Lag Length Determination:</b><br>",
                causality_data$lag_length,
                "<br><br><b>Structural Breaks Analysis:</b><br>",
                causality_data$breaks
            )),
            footer = tagList(
                modalButton("Close"),
                if (causality_data$stock1_results$order == causality_data$stock2_results$order) {
                    actionButton("cointegration_test", "Test for Cointegration")
                } else {
                    actionButton("granger_test", "Granger Causality")
                }
            )
        ))
    })
    
    # Cointegration Test
    observeEvent(input$cointegration_test, {
        coint_data <- cbind(
            stock1 = as.numeric(causality_data$stock1_data),
            stock2 = as.numeric(causality_data$stock2_data)
        )
        
        coint_data <- na.omit(coint_data)
        if (!is.matrix(coint_data) || ncol(coint_data) != 2 || any(!is.finite(coint_data))) {
            showModal(modalDialog(
                title = "Error",
                "Cointegration test requires two valid numeric time series with no missing values.",
                easyClose = TRUE,
                footer = modalButton("Close")
            ))
            return(NULL)
        }
        
        tryCatch({
            coint_test <- ca.jo(coint_data, type = "trace", ecdet = "const", K = 2)
            showModal(modalDialog(
                title = "Cointegration Test Results",
                HTML(paste0(
                    "Test Statistic: ", round(summary(coint_test)@teststat[1], 4), "<br>",
                    "Critical Value: ", round(summary(coint_test)@cval[1, 1], 4), "<br>",
                    ifelse(summary(coint_test)@teststat[1] > summary(coint_test)@cval[1, 1], 
                           "Cointegrated", "Not Cointegrated")
                )) ,
                footer = modalButton("Close")
            ))
        }, error = function(e) {
            showModal(modalDialog(
                title = "Error",
                "An error occurred while running the Cointegration test. Please ensure the data is valid.",
                easyClose = TRUE,
                footer = modalButton("Close")
            ))
        })
    })
    
    # Granger Causality Test
    observeEvent(input$granger_test, {
        tryCatch({
            var_model <- VAR(cbind(causality_data$stock1_data, causality_data$stock2_data), p = 2)
            granger_y1_cause_y2 <- causality(var_model, cause = "y1")
            granger_y2_cause_y1 <- causality(var_model, cause = "y2")
            
            p_value_y1_cause_y2 <- granger_y1_cause_y2$Granger[["p.value"]]
            p_value_y2_cause_y1 <- granger_y2_cause_y1$Granger[["p.value"]]
            
            relationship <- if (p_value_y1_cause_y2 < 0.05 & p_value_y2_cause_y1 < 0.05) {
                "Bidirectional Relationship"
            } else if (p_value_y1_cause_y2 < 0.05) {
                "Unidirectional: Stock 1 Granger-causes Stock 2"
            } else if (p_value_y2_cause_y1 < 0.05) {
                "Unidirectional: Stock 2 Granger-causes Stock 1"
            } else {
                "No Granger Causal Relationship"
            }
            
            showModal(modalDialog(
                title = "Granger Causality Test Results",
                HTML(paste0(
                    "<b>Granger Causality Test Summary:</b><br>",
                    "<b>Stock 1 -> Stock 2:</b> P-Value = ", round(p_value_y1_cause_y2, 4), "<br>",
                    "<b>Stock 2 -> Stock 1:</b> P-Value = ", round(p_value_y2_cause_y1, 4), "<br><br>",
                    "<b>Conclusion:</b> ", relationship
                )) ,
                footer = modalButton("Close")
            ))
        }, error = function(e) {
            showModal(modalDialog(
                title = "Error",
                "An error occurred during the Granger Causality Test. Please check the data and try again.",
                easyClose = TRUE,
                footer = modalButton("Close")
            ))
        })
    })
}

shinyApp(ui = ui, server = server)

