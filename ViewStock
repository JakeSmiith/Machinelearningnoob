library(shiny)
library(shinythemes)
library(plotly)
library(dplyr)
library(tseries)  # For ADF test

# Check if `price_data_wide` exists
if (!exists("price_data_wide")) {
    stop("The dataset `price_data_wide` is missing. Please load the correct data.")
}

# Define UI
ui <- fluidPage(
    uiOutput("theme_ui"),  # Dynamically render the UI with the selected theme
    titlePanel("View Stock"),
    
    sidebarLayout(
        sidebarPanel(
            selectInput("selected_column", "Choose a column to plot:",
                        choices = names(price_data_wide)[-1],
                        selected = names(price_data_wide)[2]),
            selectInput("selected_year", "Choose a year to display:",
                        choices = c("Max", unique(format(price_data_wide$Date, "%Y"))),
                        selected = "Max"),
            selectInput("theme", "Choose Theme:",
                        choices = c("Journal" = "journal", "Superhero" = "superhero"),
                        selected = "journal"),
            br(),
            actionButton("causality_check", "Check for Causality")  # New Button
        ),
        mainPanel(
            plotlyOutput("graph")
        )
    )
)

# Define server logic
server <- function(input, output, session) {
    # Dynamically update the theme
    output$theme_ui <- renderUI({
        fluidPage(theme = shinytheme(input$theme))
    })
    
    # Interactive Plot for Selected Stock and Year
    output$graph <- renderPlotly({
        filtered_data <- price_data_wide %>%
            filter(!is.na(.data[[input$selected_column]])) %>%
            {
                if (input$selected_year != "Max") {
                    filter(., format(Date, "%Y") == input$selected_year)
                } else {
                    .
                }
            }
        
        plot_ly(data = filtered_data) %>%
            add_lines(
                x = ~Date,
                y = ~.data[[input$selected_column]],
                name = input$selected_column,
                hoverinfo = "text",
                text = ~paste(
                    "Date: ", format(Date, "%d/%m/%Y"), "<br>",
                    "Value: £", round(.data[[input$selected_column]], 2)
                ),
                line = list(color = "blue")
            ) %>%
            layout(
                title = paste("Plot of", input$selected_column, 
                              if (input$selected_year == "Max") "over Entire Period" else paste("for Year", input$selected_year)),
                xaxis = list(title = "Date", tickformat = "%d/%m/%Y"),
                yaxis = list(title = "Value (£)"),
                hoverlabel = list(bgcolor = "white", font = list(size = 12))
            )
    })
    
    # Show Pop-Up for Causality Analysis
    observeEvent(input$causality_check, {
        showModal(modalDialog(
            title = "Causality Analysis",
            fluidPage(
                selectInput("stock1", "Select Stock 1:",
                            choices = names(price_data_wide)[-1],
                            selected = names(price_data_wide)[2]),
                selectInput("stock2", "Select Stock 2:",
                            choices = names(price_data_wide)[-1],
                            selected = names(price_data_wide)[3]),
                dateRangeInput("causality_date_range", "Select Date Range:",
                               start = min(price_data_wide$Date),
                               end = max(price_data_wide$Date)),
                actionButton("run_adf", "Run ADF Tests")
            ),
            easyClose = TRUE,
            footer = modalButton("Close")
        ))
    })
    
    # Run ADF Tests and Determine Order of Integration
    observeEvent(input$run_adf, {
        removeModal()  # Close the modal
        
        stock1_data <- price_data_wide %>%
            filter(Date >= input$causality_date_range[1] & Date <= input$causality_date_range[2]) %>%
            select(Date, stock1 = .data[[input$stock1]]) %>%
            filter(!is.na(stock1))
        
        stock2_data <- price_data_wide %>%
            filter(Date >= input$causality_date_range[1] & Date <= input$causality_date_range[2]) %>%
            select(Date, stock2 = .data[[input$stock2]]) %>%
            filter(!is.na(stock2))
        
        find_order_of_integration <- function(data_column) {
            differences <- 0
            while (TRUE) {
                adf_test <- tseries::adf.test(data_column, k = 0)
                if (adf_test$p.value < 0.05) {
                    return(differences)
                }
                data_column <- diff(data_column, differences = 1)
                differences <- differences + 1
                if (differences > 5) {  # Prevent infinite loop
                    return(NA)
                }
            }
        }
        
        stock1_integration <- find_order_of_integration(stock1_data$stock1)
        stock2_integration <- find_order_of_integration(stock2_data$stock2)
        
        output$adf_results <- renderPrint({
            cat(
                "ADF Test Results:\n",
                input$stock1, "Order of Integration:", stock1_integration, "\n",
                input$stock2, "Order of Integration:", stock2_integration
            )
        })
        
        showModal(modalDialog(
            title = "ADF Test Results",
            verbatimTextOutput("adf_results"),
            easyClose = TRUE,
            footer = modalButton("Close")
        ))
    })
}

# Run the application
shinyApp(ui = ui, server = server)

