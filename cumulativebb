# Load necessary libraries
library(shiny)
library(plotly)
library(DT)
library(bslib)

# UI Definition
ui <- fluidPage(
    theme = bs_theme(
        bootswatch = "flatly",
        primary = "#0056b3",
        secondary = "#FF5733"
    ),
    
    titlePanel(
        tags$h1("Interactive Bollinger Bands Simulation", style = "text-align: center; color: #0056b3;")
    ),
    
    sidebarLayout(
        sidebarPanel(
            tags$h4("Configuration", style = "color: #FF5733;"),
            selectizeInput(
                inputId = "ticker",
                label = "Select Ticker:",
                choices = NULL,
                options = list(
                    placeholder = "Search or select a ticker...",
                    maxOptions = 503
                )
            ),
            dateRangeInput("date_range", "Select Date Range:", start = "2010-01-01", end = Sys.Date()),
            numericInput("initial_capital", "Initial Capital (£):", value = 1e7, min = 1e4, step = 1e6),
            numericInput("transaction_cost", "Transaction Cost (%):", value = 0, min = 0, max = 100, step = 0.1),
            numericInput("position_size", "Position Size (% of capital):", value = 10, min = 1, max = 100, step = 1),
            actionButton("update", "Update", class = "btn-primary btn-lg"),
            width = 3
        ),
        
        mainPanel(
            tabsetPanel(
                tabPanel(
                    "Bar Chart",
                    tags$h3("Signal Proportions (BUY/SELL)", style = "text-align: center;"),
                    plotlyOutput("bar_chart", height = "400px")
                ),
                tabPanel(
                    "Scatter Plot",
                    tags$h3("Price with Bollinger Bands and Breaches", style = "text-align: center;"),
                    plotlyOutput("scatter_plot", height = "400px")
                ),
                tabPanel(
                    "Line Plot",
                    tags$h3("Cumulative Profit (£)", style = "text-align: center;"),
                    plotlyOutput("line_plot", height = "400px")
                ),
                tabPanel(
                    "Signal Table",
                    tags$h3("Detailed Signal Data", style = "text-align: center;"),
                    DTOutput("signals_table")
                )
            )
        )
    )
)

# Server Definition
server <- function(input, output, session) {
    # Load tickers directly from ticker_full (character vector)
    observe({
        req(ticker_full)
        if (!is.character(ticker_full)) {
            showNotification("ticker_full should be a character vector.", type = "error")
            return()
        }
        
        # Update the ticker dropdown
        updateSelectizeInput(session, "ticker", choices = ticker_full, server = TRUE)
    })
    
    # Reactive data based on user inputs
    filtered_data <- reactive({
        req(input$ticker, input$date_range, signals_list)
        
        # Fetch data for the selected ticker
        data <- signals_list[[input$ticker]]
        
        # Check if the dataset is empty
        if (is.null(data) || nrow(data) == 0) {
            showNotification("The selected ticker data is empty or unavailable.", type = "error")
            return(NULL)
        }
        
        # Generate Date column if missing
        if (!"Date" %in% names(data)) {
            data$Date <- seq.Date(from = as.Date("2010-01-01"), by = "day", length.out = nrow(data))
        }
        
        # Convert the Date column to Date type
        data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
        
        # Filter data by date range
        data <- subset(data, Date >= input$date_range[1] & Date <= input$date_range[2])
        
        # Remove rows with missing data
        data <- na.omit(data)
        
        if (nrow(data) < 1) {
            showNotification("No data available for the selected date range.", type = "error")
            return(NULL)
        }
        
        return(data)
    })
    
    # Calculate Cumulative Profit Iteratively
    cumulative_profit <- reactive({
        req(filtered_data())
        data <- filtered_data()
        initial_capital <- input$initial_capital
        transaction_cost <- input$transaction_cost / 100
        position_size <- input$position_size / 100
        
        # Add a new column for cumulative profit
        data$CumulativeProfit <- 0
        capital <- initial_capital
        
        for (i in seq_len(nrow(data))) {
            if (data$Signal[i] == "BUY") {
                # Calculate the cost of the trade
                trade_value <- capital * position_size
                cost <- trade_value * transaction_cost
                capital <- capital - cost
            } else if (data$Signal[i] == "SELL") {
                # Simulate a profit/loss on the trade
                if (i > 1) {
                    trade_value <- capital * position_size
                    cost <- trade_value * transaction_cost
                    profit <- (data$Price[i] - data$Price[i - 1]) * trade_value / data$Price[i - 1]
                    capital <- capital + profit - cost
                }
            }
            # Update cumulative profit
            data$CumulativeProfit[i] <- capital - initial_capital
        }
        
        return(data)
    })
    
    # Bar Chart for Signal Proportions
    output$bar_chart <- renderPlotly({
        req(filtered_data())
        data <- filtered_data()
        signal_counts <- table(data$Signal[data$Signal %in% c("BUY", "SELL")])
        
        plot_ly(
            x = names(signal_counts),
            y = as.numeric(signal_counts),
            type = "bar",
            marker = list(color = c("#1abc9c", "#e74c3c"))
        ) %>% layout(
            title = paste("Signal Proportions (BUY/SELL) for", input$ticker),
            xaxis = list(title = "Signal"),
            yaxis = list(title = "Frequency")
        )
    })
    
    # Scatter Plot with Bollinger Bands
    output$scatter_plot <- renderPlotly({
        req(filtered_data())
        data <- filtered_data()
        
        plot_ly(data, x = ~Date) %>%
            add_lines(y = ~Price, name = "Price", line = list(color = "blue")) %>%
            add_lines(y = ~BB_Upper, name = "BB Upper", line = list(color = "red", dash = "dash")) %>%
            add_lines(y = ~BB_Lower, name = "BB Lower", line = list(color = "green", dash = "dash")) %>%
            add_markers(data = subset(data, Signal == "BUY"), x = ~Date, y = ~Price, name = "BUY", marker = list(color = "green", size = 8)) %>%
            add_markers(data = subset(data, Signal == "SELL"), x = ~Date, y = ~Price, name = "SELL", marker = list(color = "red", size = 8)) %>%
            layout(
                title = paste("Bollinger Bands for", input$ticker),
                xaxis = list(title = "Date"),
                yaxis = list(title = "Price")
            )
    })
    
    # Line Plot for Cumulative Profit
    output$line_plot <- renderPlotly({
        req(cumulative_profit())
        data <- cumulative_profit()
        
        plot_ly(data, x = ~Date, y = ~CumulativeProfit, type = "scatter", mode = "lines") %>%
            layout(
                title = paste("Cumulative Profit (£) for", input$ticker),
                xaxis = list(title = "Date"),
                yaxis = list(title = "Cumulative Profit (£)")
            )
    })
    
    # Signal Table
    output$signals_table <- renderDT({
        req(filtered_data())
        datatable(filtered_data(), options = list(pageLength = 10, autoWidth = TRUE))
    })
}

# Run the application
shinyApp(ui = ui, server = server)
